type Query {
  autocomplete(searchTerm: String): [AutoCompleteResult]
  cellTypeHierarchy: CellTypeHierarchy
  geneExpressionSummary(dataType: String, geneSymbol: String, cellType: String, tissueType: String) : [GeneExpressionSummary]
  getClusterHieararchies(cellType: String!): [ClusterHierarchy]
  getUmapPlotData(dataType: String!, geneSymbol: String!, tissueType: String): PlotData
  dataTypesForConcept(geneSymbol: String, clusterName: String): [String]
  getDataTypeSummaryInformation: [DataTypeSummaryInformation]
  getRTGeneExpressionByTissue(comparisonType: String, geneSymbol: String): RTGeneExpressionByTissue
  getRPGeneExpressionByTissue(geneSymbol: String!): [RPAccessionGroup]
  getRPGeneExpressionByTissueAndProtein(geneSymbol: String!, protein: String!): RPExpressionByTissueType
  getRTGeneExpressionByStructure(structure: String): [RTGeneExpression]
  getRPGeneExpressionByStructure(structure: String): [RPGeneExpression]
  getSummaryData: [DataTypeSummaryInformation]
  getDataTypeInformationByParticipant(redcapId: String!): ParticipantDataTypeSummary
  getRepoDataTypeInformationByParticipant(redcapId: String!): ParticipantRepoDataTypeSummary
  participantSummaryDataset(redcapId: String!): ParticipantSummaryDataset 
  getTotalParticipantFilesCount(redcapId: String!): ParticipantRepoDataTypeInformation
  getTissueTypeSummaryData: [ParticipantTissueTypeSummary]
  getAtlasSummaryRows: AtlasRepoSummaryResult
  getAtlasMessages: [AtlasMessages]
  getExperimentalStrategyCountsByParticipant(redcapId: String!): [ParticipantRepoDataTypeInformation]
}

type AtlasMessages {
  id: Int
  message: String
  startDate: String
  endDate: String
  application: String
}

type AtlasRepoSummaryResult {
  totalFiles: Int
  summaryRows: [AtlasRepoSummaryRow]
}

type AtlasRepoSummaryRow {
  akiCount: Long
  ckdCount: Long
  hrtCount: Long
  dmrCount: Long
  omicsType: String
  linkInformation: AtlasRepositoryLinkInformation
}

type AtlasRepositoryLinkInformation {
  linkType: String
  linkValue: String
}

type ParticipantTissueTypeSummary {
  akiCount: Long
  ckdCount: Long
  hrtCount: Long
  dmrCount: Long
}

type ParticipantDataTypeSummary {
  spatialViewerDataTypes: [ParticipantDataTypeInformation]
  explorerDataTypes: [ParticipantDataTypeInformation]
}

type ParticipantDataTypeInformation {
  dataType: String
  count: Long
  isAggregatedData: Boolean
}

type ParticipantRepoDataTypeSummary {
  repositoryDataTypes: [ParticipantRepoDataTypeInformation]
}

type ParticipantRepoDataTypeInformation {
  dataType: String
  count: Long
  linkInformation: AtlasRepositoryLinkInformation
}

type DataTypeSummaryInformation {
  omicsType: String
  dataType: String
  dataTypeShort: String
  akiCount: Long
  ckdCount: Long
  hrtCount: Long
  dmrCount: Long
  participantCount: Long
}


type AutoCompleteResult {
  value: String
  name: String
  type: String
  id: ID
  aliases: [String]
}

type CellTypeHierarchy {
  cellTypeRegions: [CellTypeStructureRegion]
}

type CellTypeStructureRegion {
  cellTypeSubregions: [CellTypeStructureSubregion]
  regionName: String
}

type CellTypeStructureSubregion {
  cellTypes: [CellType]
  subregionName: String
}

type CellType {
	cellType: String
}

type GeneExpressionSummary {
    id: ID
    tissueType: String
    gene: String
    pVal: Float
    pValAdj: Float
    foldChange: Float
    pct1: Float
    pct2: Float
    avgExp: Float
    cluster: String
    clusterName: String
    dataType: String
    cellCount: Int
}

type ClusterHierarchy {
	cellType: String
	cellTypeId: Int
	structureRegion: String
	structureSubregion: String
	clusterId: Int
	clusterName: String
	isSingleNucCluster: String
	isSingleCellCluster: String
    isRegionalTranscriptomics: String
    isRegionalProteomics: String
    cellTypeOrder: Float
}

type PlotData {
	referenceData: [ReferenceCluster]
	featureData: [FeatureData]
}

type FeatureData {
	xValues: [Float]
	yValues: [Float]
	expression: [Float]
    hoverDisplay: [String]
}

type ReferenceCluster {
	xValues: [Float]
	yValues: [Float]
	color: String
	clusterName: String
    clusterAbbreviation: String
}

type RTGeneExpression {
    id: ID
    geneSymbol: String
    segment: String
    segmentName: String
    foldChange: Float
    pVal: Float
    stdDev: Float
    pValLog10: Float
    tissueType: String
    sampleCount: Int
}

type RTGeneExpressionByTissue {
    all: [RTGeneExpression]
    hrt: [RTGeneExpression]
    ckd: [RTGeneExpression]
    dmr: [RTGeneExpression]
    aki: [RTGeneExpression]
}

type RPAccessionGroup {
    accession: String
    rpExpressionByTissueType: RPExpressionByTissueType
}

type RPGeneExpression {
    id: ID
    geneSymbol: String
    fdrConfidence: String
    accession: String
    description: String
    coveragePct: Int
    numPeptides: Int
    numUniquePeptides: Int
    comparison: String
    region: String
    foldChange: Float
    adjPVal: Float
    tissueType: String
    sampleCount: Int
}

type RPExpressionByTissueType {
    all: [RPGeneExpression]
}

type ParticipantSummaryDataset {
  participantId: String
  redcapId: String
  tissueType: String
  clinicalData: String
}