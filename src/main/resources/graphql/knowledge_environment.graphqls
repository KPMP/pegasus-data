type Query {
  autocomplete(searchTerm: String): [AutoCompleteResult]
  cellTypeHierarchy: CellTypeHierarchy
  geneExpressionSummary(dataType: String, geneSymbol: String, cellType: String, enrollmentCategory: String) : [GeneExpressionSummary]
  geneExpressionSummary2025(dataType: String, geneSymbol: String, cellType: String, enrollmentCategory: String) : [GeneExpressionSummary2025]
  getClusterHieararchies(cellType: String!): [ClusterHierarchy]
  getUmapPlotData(dataType: String!, geneSymbol: String!, enrollmentCategory: String): PlotData
  getUmapPlotData2025(dataType: String!, geneSymbol: String!, enrollmentCategory: String): PlotData2025
  dataTypesForConcept(geneSymbol: String, clusterName: String): [String]
  getDataTypeSummaryInformation: [DataTypeSummaryInformation]
  getDataTypeSummaryInformation2025: [DataTypeSummaryInformation2025]
  getRTGeneExpressionByEnrollment(comparisonType: String, geneSymbol: String): RTGeneExpressionByEnrollment
  getRPGeneExpressionByEnrollment(geneSymbol: String!): [RPAccessionGroup]
  getRPGeneExpressionByEnrollmentAndProtein(geneSymbol: String!, protein: String!): RPExpressionByEnrollmentCategory
  getRTGeneExpressionByStructure(structure: String): [RTGeneExpression]
  getRPGeneExpressionByStructure(structure: String): [RPGeneExpression]
  getSummaryData: [DataTypeSummaryInformation]
  getDataTypeInformationByParticipant(redcapId: String!): ParticipantDataTypeSummary
  getDataTypeInformationByParticipant2025(redcapId: String!): ParticipantDataTypeSummary2025
  getRepoDataTypeInformationByParticipant(redcapId: String!): ParticipantRepoDataTypeSummary
  participantSummaryDataset(redcapId: String!): ParticipantSummaryDataset 
  getTotalParticipantFilesCount(redcapId: String!): ParticipantRepoDataTypeInformation
  getEnrollmentCategorySummaryData: [ParticipantEnrollmentCategorySummary]
  getAtlasSummaryRows: AtlasRepoSummaryResult
  getAtlasMessages: [AtlasMessages]
  getExperimentalStrategyCountsByParticipant(redcapId: String!): [ParticipantRepoDataTypeInformation]
  getParticipantClinicalDataset(redcapId: String!): ParticipantClinicalDataset
}

type AtlasMessages {
  id: Int
  message: String
  startDate: String
  endDate: String
  application: String
}

type AtlasRepoSummaryResult {
  totalFiles: Int
  summaryRows: [AtlasRepoSummaryRow]
}

type AtlasRepoSummaryRow {
  akiCount: Int
  ckdCount: Int
  hrtCount: Int
  dmrCount: Int
  totalCount: Int
  omicsType: String
  linkInformation: AtlasRepositoryLinkInformation
}

type AtlasRepositoryLinkInformation {
  linkType: String
  linkValue: String
}

type ParticipantEnrollmentCategorySummary {
  akiCount: Int
  ckdCount: Int
  hrtCount: Int
  dmrCount: Int
}

type ParticipantDataTypeSummary {
  spatialViewerDataTypes: [ParticipantDataTypeInformation]
  explorerDataTypes: [ParticipantDataTypeInformation]
}

type ParticipantDataTypeSummary2025 {
  spatialViewerDataTypes: [ParticipantDataTypeInformation]
  explorerDataTypes: [ParticipantDataTypeInformation2025]
}

type ParticipantDataTypeInformation2025 {
  dataType: String
  count: Int
  isAggregatedData: Boolean
}

type ParticipantDataTypeInformation {
  dataType: String
  count: Int
  isAggregatedData: Boolean
}

type ParticipantRepoDataTypeSummary {
  repositoryDataTypes: [ParticipantRepoDataTypeInformation]
}

type ParticipantRepoDataTypeInformation {
  dataType: String
  count: Int
  linkInformation: AtlasRepositoryLinkInformation
}

type DataTypeSummaryInformation2025 {
  omicsType: String
  dataType: String
  dataTypeShort: String
  akiCount: Int
  ckdCount: Int
  hrtCount: Int
  dmrCount: Int
  totalCount: Int
  participantCount: Int
}


type DataTypeSummaryInformation {
  omicsType: String
  dataType: String
  dataTypeShort: String
  akiCount: Int
  ckdCount: Int
  hrtCount: Int
  dmrCount: Int
  totalCount: Int
  participantCount: Int
}


type AutoCompleteResult {
  value: String
  name: String
  type: String
  id: ID
  aliases: [String]
}

type CellTypeHierarchy {
  cellTypeRegions: [CellTypeStructureRegion]
}

type CellTypeStructureRegion {
  cellTypeSubregions: [CellTypeStructureSubregion]
  regionName: String
}

type CellTypeStructureSubregion {
  cellTypes: [CellType]
  subregionName: String
}

type CellType {
	cellType: String
}

type GeneExpressionSummary {
    id: ID
    enrollmentCategory: String
    gene: String
    pVal: Float
    pValAdj: Float
    foldChange: Float
    pct1: Float
    pct2: Float
    avgExp: Float
    cluster: String
    clusterName: String
    dataType: String
    cellCount: Int
}

type GeneExpressionSummary2025 {
    id: ID
    enrollmentCategory: String
    gene: String
    pVal: Float
    pValAdj: Float
    foldChange: Float
    pct1: Float
    pct2: Float
    avgExp: Float
    cluster: String
    clusterName: String
    dataType: String
    cellCount: Int
}

type ClusterHierarchy {
	cellType: String
	cellTypeId: Int
	structureRegion: String
	structureSubregion: String
	clusterId: Int
	clusterName: String
	isSingleNucCluster: String
	isSingleCellCluster: String
    isRegionalTranscriptomics: String
    isRegionalProteomics: String
    cellTypeOrder: Float
}

type PlotData2025 {
	referenceData: [ReferenceCluster2025]
	featureData: [FeatureData2025]
}

type FeatureData2025 {
	xValues: [Float]
	yValues: [Float]
	expression: [Float]
    hoverDisplay: [String]
}

type ReferenceCluster2025 {
	xValues: [Float]
	yValues: [Float]
	color: String
	clusterName: String
    clusterAbbreviation: String
}

type PlotData {
	referenceData: [ReferenceCluster]
	featureData: [FeatureData]
}

type FeatureData {
	xValues: [Float]
	yValues: [Float]
	expression: [Float]
    hoverDisplay: [String]
}

type ReferenceCluster {
	xValues: [Float]
	yValues: [Float]
	color: String
	clusterName: String
    clusterAbbreviation: String
}

type RTGeneExpression {
    id: ID
    geneSymbol: String
    segment: String
    segmentName: String
    foldChange: Float
    pVal: Float
    stdDev: Float
    pValLog10: Float
    enrollmentCategory: String
    sampleCount: Int
    adjPVal: Float
}

type RTGeneExpressionByEnrollment {
    all: [RTGeneExpression]
    hrt: [RTGeneExpression]
    ckd: [RTGeneExpression]
    dmr: [RTGeneExpression]
    aki: [RTGeneExpression]
}

type RPAccessionGroup {
    accession: String
    rpExpressionByEnrollmentCategory: RPExpressionByEnrollmentCategory
}

type RPGeneExpression {
    id: ID
    geneSymbol: String
    fdrConfidence: String
    accession: String
    description: String
    coveragePct: Int
    numPeptides: Int
    numUniquePeptides: Int
    comparison: String
    region: String
    foldChange: Float
    adjPVal: Float
    enrollmentCategory: String
    sampleCount: Int
}

type RPExpressionByEnrollmentCategory {
    all: [RPGeneExpression]
}

type ParticipantSummaryDataset {
  participantId: String
  redcapId: String
  enrollmentCategory: String
  adjudicatedCategory: String  
}

type ParticipantClinicalDataset {
    participantId: String
    participantClinicalId: String
    kdigoStage: String
    baselineEgfr: String
    proteinuria: String
    a1c: String
    albuminuria: String
    diabetesHistory: String
    diabetesDuration: String
    hypertensionHistory: String
    hypertensionDuration: String
    onRaasBlockade: String
    race: String
    ageBinned: String
    sex: String
    sampleType: String
    tissueSource: String
    protocol: String
}