buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:3.2.5")
    }
}

plugins {
    id 'com.palantir.docker' version '0.35.0'
    id 'org.springframework.boot' version '3.2.5'
}

group = 'kingstonduo'
version = '2.5.0'

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'


repositories {
    mavenCentral()
}

sourceCompatibility = '21'
targetCompatibility = '21'

dependencies {
    
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-test'

    implementation 'commons-io:commons-io:2.16.1'
    implementation 'com.mysql:mysql-connector-j:9.0.0'
    implementation 'org.apache.commons:commons-compress:1.26.2'
    implementation 'org.apache.commons:commons-text:1.12.0'
    implementation 'com.graphql-java:graphql-spring-boot-starter:5.0.2'
    implementation 'com.graphql-java:graphiql-spring-boot-starter:5.0.2'
    implementation 'com.graphql-java:graphql-java-tools:5.2.4'
    implementation 'org.springframework.graphql:spring-graphql'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'com.hazelcast:hazelcast-all:4.2.5'

    testImplementation('org.mockito:mockito-junit-jupiter:3.12.4')
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework:spring-test:5.2.25.RELEASE'
    testImplementation 'org.mockito:mockito-core'
    
}

springBoot {
    mainClass = "org.kpmp.Application"
}

task unpack(type: Copy) {
    dependsOn bootJar
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into("build/dependency")
}

def getCurrentGitBranch() {
  if (project.hasProperty('tag')) {
    def tagValue = project.property('tag')
    return tagValue
  } else {
      def gitBranch = "Unknown branch"
      try {
        def workingDir = new File("${project.projectDir}")
        def result = 'git rev-parse --abbrev-ref HEAD'.execute(null, workingDir)
        result.waitFor()
        if (result.exitValue() == 0) {
            gitBranch = result.text.trim()
        }
      } catch (e) {
        }
        if (gitBranch == "develop" || gitBranch == "master"){
          return project.version
        }else{
          return gitBranch
        }
    }
}

docker {
    name "kingstonduo/pegasus-data:" + getCurrentGitBranch()
    copySpec.from(tasks.unpack.outputs).into("dependency")
    buildArgs(['DEPENDENCY': "dependency"])
}
